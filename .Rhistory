import numpy as np
import itertools
from scipy.optimize import linprog
import matplotlib.pyplot as plt
np.numpy([3, 2])
np.array([3, 2])
install.packages("leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m
df = data.frame(Lat = 1:10, Long = rnorm(10))
leaflet(df) %>% addCircles()
leaflet() %>% addCircles(data = df)
leaflet() %>% addCircles(data = df, lat = ~ Lat, lng = ~ Long)
library(sp)
Sr1 = Polygon(cbind(c(2, 4, 4, 1, 2), c(2, 3, 5, 4, 2)))
Sr2 = Polygon(cbind(c(5, 4, 2, 5), c(2, 3, 2, 2)))
Sr3 = Polygon(cbind(c(4, 4, 5, 10, 4), c(5, 3, 2, 5, 5)))
Sr4 = Polygon(cbind(c(5, 6, 6, 5, 5), c(4, 4, 3, 3, 4)), hole = TRUE)
Srs1 = Polygons(list(Sr1), "s1")
Srs2 = Polygons(list(Sr2), "s2")
Srs3 = Polygons(list(Sr4, Sr3), "s3/4")
SpP = SpatialPolygons(list(Srs1, Srs2, Srs3), 1:3)
leaflet(height = "300px") %>% addPolygons(data = SpP)
install.packages('rgeos')
library(sp)
Sr1 = Polygon(cbind(c(2, 4, 4, 1, 2), c(2, 3, 5, 4, 2)))
Sr2 = Polygon(cbind(c(5, 4, 2, 5), c(2, 3, 2, 2)))
Sr3 = Polygon(cbind(c(4, 4, 5, 10, 4), c(5, 3, 2, 5, 5)))
Sr4 = Polygon(cbind(c(5, 6, 6, 5, 5), c(4, 4, 3, 3, 4)), hole = TRUE)
Srs1 = Polygons(list(Sr1), "s1")
Srs2 = Polygons(list(Sr2), "s2")
Srs3 = Polygons(list(Sr4, Sr3), "s3/4")
SpP = SpatialPolygons(list(Srs1, Srs2, Srs3), 1:3)
leaflet(height = "300px") %>% addPolygons(data = SpP)
install.packages('rgeos')
library(sp)
Sr1 = Polygon(cbind(c(2, 4, 4, 1, 2), c(2, 3, 5, 4, 2)))
Sr2 = Polygon(cbind(c(5, 4, 2, 5), c(2, 3, 2, 2)))
Sr3 = Polygon(cbind(c(4, 4, 5, 10, 4), c(5, 3, 2, 5, 5)))
Sr4 = Polygon(cbind(c(5, 6, 6, 5, 5), c(4, 4, 3, 3, 4)), hole = TRUE)
Srs1 = Polygons(list(Sr1), "s1")
Srs2 = Polygons(list(Sr2), "s2")
Srs3 = Polygons(list(Sr4, Sr3), "s3/4")
SpP = SpatialPolygons(list(Srs1, Srs2, Srs3), 1:3)
leaflet(height = "300px") %>% addPolygons(data = SpP)
SpP = SpatialPolygons(list(Srs1, Srs2), 1:3)
SpP = SpatialPolygons(list(Srs1, Srs2), 1:2)
leaflet(height = "300px") %>% addPolygons(data = SpP)
SpP = SpatialPolygons(list(Srs1, Srs2), 1:2, Srs3)
leaflet(height = "300px") %>% addPolygons(data = SpP)
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
df = data.frame(Lat = 1:10, Long = rnorm(10))
leaflet(df) %>% addCircles()
library(sp)
Sr1 = Polygon(cbind(c(2, 4, 4, 1, 2), c(2, 3, 5, 4, 2)))
Sr2 = Polygon(cbind(c(5, 4, 2, 5), c(2, 3, 2, 2)))
Sr3 = Polygon(cbind(c(4, 4, 5, 10, 4), c(5, 3, 2, 5, 5)))
Sr4 = Polygon(cbind(c(5, 6, 6, 5, 5), c(4, 4, 3, 3, 4)), hole = TRUE)
Srs1 = Polygons(list(Sr1), "s1")
Srs2 = Polygons(list(Sr2), "s2")
Srs3 = Polygons(list(Sr4, Sr3), "s3/4")
SpP = SpatialPolygons(list(Srs1, Srs2), 1:2, Srs3)
leaflet(height = "300px") %>% addPolygons(data = SpP)
SpP = SpatialPolygons(list(Srs1, Srs2, Srs3), 1:3)
leaflet(height = "300px") %>% addPolygons(data = SpP)
library(maps)
install.packages("maps")
mapStates = map("state", fill = TRUE, plot = FALSE)
library(maps)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
m = leaflet() %>% addTiles()
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
m %>% addCircleMarkers(radius = runif(100, 4, 10), color = c('red'))
m = leaflet(df) %>% addTiles()
m
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
m %>% addCircleMarkers(radius = runif(100, 4, 10), color = c('red'))
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
m %>% addProviderTiles(providers$Stamen.Toner)
data(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag))
leaflet() %>% addTiles() %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = FALSE)
)
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
leaflet() %>% addTiles() %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = FALSE)
)
install.packages(c("sf", "tmap"))
library('sp')
library('sf')
library('data.table')
library(dplyr)
library("httr")
url <- list(hostname = "telraam-api.net/v0/segments/active", scheme = "https",
query = list(request = "GetFeature",
outputFormat = "application/json")) %>% setattr("class","url")
request <- build_url(url)
active <- st_read(request)
library(sp)
library(leaflet)
library(dplyr)
library(httr)
url <- list(hostname = "telraam-api.net/v0/segments/active", scheme = "https",
query = list(request = "GetFeature",
outputFormat = "application/json")) %>% setattr("class","url")
request <- build_url(url)
install.packages("BBmisc")
library(lme4)
library(BBmisc)
dir()
setwd('/home/marc/School/Datathon_2020')
dir()
setwd('/home/marc/School/Datathon_2020')
tw_dat <- read.csv('trafficWeather_dat.csv', stringsAsFactors=FALSE)
trafficWeather_dat$total <- tw_dat$car + tw_dat$lorry
tw_dat$total <- tw_dat$car + tw_dat$lorry
#two-level Poisson model with segment as the random effect
hist(tw_dat$total, nclass=100, col = 2)
quantile(tw_dat$total)
nrow(tw_dat)
length(unique(tw_dat$segment_id))
model1.fit <- glmer(formula = total ~ 1 + (1|segment_id),
data=tw_dat,
family="poisson",
na.action=na.exclude)
summary(model1.fit)
mean(tw_dat$total)
model1.fit <- glmer(formula = total ~ 1 + (1|segment_id),
data=tw_dat,
family="gaussian",
na.action=na.exclude)
summary(model1.fit)
hist(predict(model1.fit))
model1.fit <- glmer(formula = total ~ 1 + (1|segment_id),
data=tw_dat,
family="poisson",
na.action=na.exclude)
summary(model1.fit)
hist(exp(predict(model1.fit)))
library(tsp)
library(sp)
library(leaflet)
library(dplyr)
library(httr)
setwd('/home/marc/School/Datathon_2020')
tw_dat <- read.csv('trafficWeather_dat.csv', stringsAsFactors=FALSE)
head(tw_dat)
library(tidyverse)
leaflet() %>% addTiles() %>%
addCircleMarkers(tw_dat$lng, tw_dat$lat, color=tw_dat$car)
##Take a day
head(tw_dat$date)
tw_sub <- subset(tw_dat, date == "2019-11-30" & period == 'Peak')
nrow(tw_sub)
leaflet %>% addTiles() %>%
addCircleMarkers(tw_sub$lng, tw_sub$lat, color=tw_sub$lorry)
leaflet %>% addTiles() %>%
addCircleMarkers(tw_sub$lng, tw_sub$lat)
